// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider                         = "zod-prisma-types"
  writeNullishInModelTypes         = true
  createInputTypes                 = false
  createOptionalDefaultValuesTypes = true
  createPartialTypes               = true
  createRelationValuesTypes        = true
}

datasource db {
  provider = "mysql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Post {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  @@index([name])
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  cart         Cart?
}

model User {
  id                 String    @id @default(cuid())
  name               String?
  email              String?   @unique
  password           String?
  emailVerified      DateTime?
  phoneNumber        String?   @unique
  locale             Locale    @default(en)
  lastLogin          DateTime?
  lastActivity       DateTime?
  lastPasswordChange DateTime?
  role               UserRole  @default(USER)
  accounts           Account[]
  sessions           Session[]
  posts              Post[]
  cart               Cart?
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String
  products Product[]
}

model Cart {
  id        Int        @id @default(autoincrement())
  user      User?      @relation(fields: [userId], references: [id])
  userId    String?    @unique
  session   Session?   @relation(fields: [sessionId], references: [id])
  sessionId String?    @unique
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@index([sessionId])
}

model CartItem {
  id        Int     @id @default(autoincrement())
  cart      Cart    @relation(fields: [cartId], references: [id])
  cartId    Int
  product   Product @relation(fields: [productId], references: [id])
  productId String
  quantity  Int     @default(1)

  @@unique([cartId, productId])
}

model Product {
  id          String     @id @default(cuid())
  name        String
  price       Int
  discount    Int?
  headImage   String
  images      String?    @db.Text
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  description String?    @db.Text
  Category    Category?  @relation(fields: [categoryId], references: [id])
  categoryId  Int?
  CartItem    CartItem[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserRole {
  USER
  ADMIN
}

enum Locale {
  en
  tr
}
